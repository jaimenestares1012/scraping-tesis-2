# Generated by Selenium IDE
# import pytest
from http import client
from lib2to3.pgen2 import driver
from math import radians
import os
from pprint import pformat
import requests
import time
from lxml import etree 
import json
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as ec
from pymongo import MongoClient


client = MongoClient("mongodb+srv://user_jaime:XhA7pqTDWKfQy6Nh@micluster.pns9q58.mongodb.net/cafeDB")
print("cloiente", client)
db  = client.get_database("cafeDB")
print("db", db)

def InsertarMongo(valor):
    id = db.pruebaInset.insert_one(valor)
    print("Seguardo correctamente")
    return id

class reportingMetro():
    def __init__(self, objs):
        print(objs)
        self.objs = objs
        self.driver = webdriver.Remote(command_executor="http://192.168.54.215:4444/wd/hub", desired_capabilities=DesiredCapabilities.CHROME)
        self.vars = {}
        self.wait = WebDriverWait(self.driver, 10)

    def teardown_method(self):
        self.driver.quit()

    def logica(self):
    
        self.driver.get(self.objs)
        self.driver.maximize_window()
        
        
        try:
            time.sleep(5)
            self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/div[5]/div/div[3]/button[1]')))
            self.driver.find_element(By.XPATH, "/html/body/div[5]/div/div[3]/button[1]").click()
            time.sleep(5)
        except:
            time.sleep(2)


            
        

        # self.driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
        # print("4")
        # repeticion = ""
        # estado = self.driver.find_element(By.XPATH, "/html/body/div[2]").get_attribute('style')
        # repeticion = estado.split()[1]
        # print("repeticion", repeticion)
        # while repeticion != "none;":
        #     self.driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
        #     time.sleep(1)
        #     self.driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
        #     estado = self.driver.find_element(By.XPATH, "/html/body/div[2]").get_attribute('style')
        #     repeticion = estado.split()[1]
        #     print("repeticion", repeticion, type(repeticion))
        #     if repeticion == "none;":
        #         self.driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
        #         time.sleep(1)
        #         self.driver.execute_script("window.scrollTo(0,document.body.scrollHeight)")
        #         estado = self.driver.find_element(By.XPATH, "/html/body/div[2]").get_attribute('style')
        #         repeticion = estado.split()[1]
        #     print("repeticion", repeticion, type(repeticion))
        #     print(repeticion != "none;")
        

       

        
        soup = BeautifulSoup(self.driver.page_source, 'html.parser')
        
        dom = etree.HTML(str(soup))
        productos = dom.xpath("/html/body/div[25]/div/div[2]/div[8]/div[2]/div[2]/div[2]/div/ul/li")
        for producto in productos:
            print("producto",producto)
            Nombre = producto.xpath('./div')
            print("Nombre",Nombre)
        
        # print(soup)
        # filtro1 = soup.find('div', {'class': 'product-shelf n18colunas'})
        # print("feiltro1", filtro1)
        # productos = filtro1.find_all('li', {'class': 'frutas-y-verduras'})


        # 

        # /html/body/div[25]/div/div[2]/div[8]/div[2]/div[2]/div[2]/div/ul
        return 0
        
      
        window_before = self.driver.window_handles[1]
        self.driver.switch_to.window(window_before)
        print("self.driver.window_handles[0],",  self.driver.window_handles)
        print("window_before", window_before)
        # print("self.driver.switch_to.window(window_before)", self.driver.switch_to.window(window_before))
        print("antes de leer")

        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/div/div/div/div/div/div/table/tbody/tr/td[12]')))
        self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/div/div/div/div/div/div/table/tbody/tr/td[12]").click()


        self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/div/div/div/div/div/div/table/tbody/tr/td[12]/a").click()
        print("<-----------------------------------------   3er link  ----------------------------------------------->")

        window_before = self.driver.window_handles[2]
        self.driver.switch_to.window(window_before)
        print("self.driver.window_handles,",  self.driver.window_handles)
        print("window_before", window_before)
        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[2]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/div/div/div/div/div/div/table/tbody/tr/td[1]/img')))
        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody')))

        print("-----------------------------------------------------------      PERFILES      ------------------------------------------------------")
        plataforma = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[8]/td").text
        identificador = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[9]/td").text
        nombres = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[1]/td").text
        apellidos = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[2]/td").text
        correo = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[3]/td").text
        pais = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[7]/td").text
        ciudad = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[6]/td").text   
        prefijoTel = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[4]/td").text
        telefono = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[5]/td").text
        tipoIdentificacion = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[10]/td").text
        numeroIdentificacion = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[11]/td").text
        actualizado = self.driver.find_element(By.XPATH, "/html/body/section/app-view/div/public-dashboard-page/div[1]/div[2]/dashboard-grid/div/div/div[1]/dashboard-widget/div/div/div[2]/visualization-renderer/div/div/table/tbody/tr[12]/td").text

      

        

        perfil={
            "nombres": nombres,
            "apellidos": apellidos,
            "correo": correo,
            "prefijoTel": prefijoTel,
            "telefono": telefono,  
            "ciudad": ciudad,
            "pais": pais,
            "plataforma": plataforma,
            "identificador": identificador,
            "tipoIdentificacion": tipoIdentificacion,
            "numeroIdentificacion": numeroIdentificacion,
            "actualizado": actualizado,            
        }
        responseGeneral={
            "perfil":perfil,
            # "datosTelefonicos": datosTelefonicos,
            # "datosFamiliares": datosFamiliares,
            # "direccionesRegistradas": direccionesRegistradas,
            # "autosRegistrados": autosRegistrados,
            # "resumenLaboral": resumenLaboral,
            # "reporteCreditos":reporteCreditos,
            # "detalleCreditos": detalleCreditos,
        }
        print("responseGeneral----->", responseGeneral)
        self.driver.quit()
        return responseGeneral
        print()

        print("----------------------------------------------------------------      TELEFONOS     ---------------------------------------------------")
        condicionTelefonos=False
        datosTelefonicos = []

        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div/div/div[4]/table/tbody/tr/td[2]")
        except:
            pass
            condicionTelefonos=True 


        if condicionTelefonos:
            datosTelefonicos = ["No hay datos registrados"]
            print("datosTelefonicos  ----->", datosTelefonicos)
        else:
            numerosRegistrados=self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div/div/div[4]/table/tbody/tr")
            print("Elementos del arreglo de telefonos  --->", len(numerosRegistrados))
            for numeros in numerosRegistrados:
                numero = numeros.find_element(By.XPATH, './td[1]').text
                print("TELEFONOS ---->",numero)
                estado = numeros.find_element(By.XPATH, './td[2]').text
                fechaValidacion = numeros.find_element(By.XPATH, './td[3]').text
                fechaOrigen = numeros.find_element(By.XPATH, './td[4]').text
                operador= numeros.find_element(By.XPATH, './td[5]/span').get_attribute('title')
                datos={
                    "numero": numero,
                    "estado": estado,
                    "fechaValidacion": fechaValidacion,
                    "fechaOrigen": fechaOrigen,
                    "operador": operador
                }
            
                datosTelefonicos.append(datos)

        print()
        print("----------------------------------------------------------------      DATOS FAMILIARES     ---------------------------------------------------")
        condicionFamiliares=False
        datosFamiliares = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[4]/div[2]/table/tbody/tr/td[2]")
        except:
            pass
            condicionFamiliares=True 

        if condicionFamiliares:
            datosFamiliares = ["No hay datos registrados"]
            print("datosFamiliares ----->", datosFamiliares)
        else:
            familiares=self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[4]/div[2]/table/tbody/tr")
            print("Elementos del arreglo familiares  --->", len(familiares))
            for familiar in familiares:
                documentoFamiliar = familiar.find_element(By.XPATH, './td[1]').text
                print("FAMILIARES ---->",documentoFamiliar)
                apellidoPaterno = familiar.find_element(By.XPATH, './td[2]').text
                apellidoMaterno = familiar.find_element(By.XPATH, './td[3]').text
                nombres = familiar.find_element(By.XPATH, './td[4]').text
                fechaNacimientoFamiliar= familiar.find_element(By.XPATH, './td[5]').text
                edadFamiliar= familiar.find_element(By.XPATH, './td[6]').text
                parentesco= familiar.find_element(By.XPATH, './td[7]').text
                datos={
                    "documentoFamiliar": documentoFamiliar,
                    "apellidoPaterno": apellidoPaterno,
                    "apellidoMaterno": apellidoMaterno,
                    "nombres": nombres,
                    "fechaNacimientoFamiliar": fechaNacimientoFamiliar,
                    "edadFamiliar": edadFamiliar,
                    "parentesco": parentesco,
                }
            
                datosFamiliares.append(datos)
        
        
        print()
        print("----------------------------------------------------------------      DIRECCIONES     ---------------------------------------------------")
        condicionDireccion=False
        direccionesRegistradas = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[1]/div[2]/table/tbody/tr/td[2]")
        except:
            pass
            condicionDireccion=True

        if condicionDireccion:
            direccionesRegistradas["No hay datos registrados"]
            print("direccionesRegistradas ---->", direccionesRegistradas)
        else:
            direcciones=self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[1]/div[2]/table/tbody/tr")
            iterador=1
            for direccion in direcciones:
                print("ITERADOR DIRECCIONES---->", iterador)
                direccionRegistrada = direccion.find_element(By.XPATH, './td[1]').text
                departamento = direccion.find_element(By.XPATH, './td[2]').text
                provincia = direccion.find_element(By.XPATH, './td[3]').text
                distrito = direccion.find_element(By.XPATH, './td[4]').text
                datos={
                    "direccion": direccionRegistrada,
                    "departamento": departamento,
                    "provincia": provincia,
                    "distrito": distrito
                }
                iterador=iterador+1
                direccionesRegistradas.append(datos)



        self.driver.refresh()
        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/div[2]/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div/figure')))

        print()
        print("----------------------------------------------------------------      AUTOS     ---------------------------------------------------")
        condicionAuto=False
        autosRegistrados = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[5]/div[2]/table/tbody/tr/td[2]")
        except:
            pass
            condicionAuto=True
        if condicionAuto:
            autosRegistrados = ["No hay datos registrados"]
            print("autosRegistrados ---->", autosRegistrados)
        else:
            autos=self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[1]/div/div[5]/div[2]/table/tbody/tr/td")
            for auto in autos:
                orden = auto.find_element(By.XPATH, './td[1]').text
                marca = auto.find_element(By.XPATH, './td[2]').text
                modelo = auto.find_element(By.XPATH, './td[3]').text
                placa = auto.find_element(By.XPATH, './td[4]').text
                fecha = auto.find_element(By.XPATH, './td[1]').text
                tipoAuto = auto.find_element(By.XPATH, './td[2]').text
                color = auto.find_element(By.XPATH, './td[3]').text
                combustible = auto.find_element(By.XPATH, './td[4]').text
                datos={
                    "orden": orden,
                    "marca": marca,
                    "modelo": modelo,
                    "placa": placa,
                    "fecha": fecha,
                    "tipoAuto": tipoAuto,
                    "color": color,
                    "combustible": combustible
                }
                autosRegistrados.append(datos)


        self.driver.refresh()
        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/div[2]/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div/figure')))
        self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/ul/li[2]/a").click()
        print()
        print("----------------------------------------------------------------      LABORAL      ---------------------------------------------------")
        condicionLaboral=False
        resumenLaboral = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/div[2]/table/tbody/tr[1]/td[2]")
        except:
            pass
            condicionLaboral=True
        
        if condicionLaboral:
            resumenLaboral=["No hay datos registrados"]
            print("resumenLaboral---->", resumenLaboral)
        else:
            registrosSueldos=self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[1]/div[2]/table/tbody/tr")
            for registrosSueldo in registrosSueldos:
                orden = registrosSueldo.find_element(By.XPATH, './td[1]').text
                print("ITERADOR LABORAL---->", orden)
                fechaRegistro = registrosSueldo.find_element(By.XPATH, './td[2]').text
                empresa = registrosSueldo.find_element(By.XPATH, './td[3]').text
                ruc = registrosSueldo.find_element(By.XPATH, './td[4]').text
                condicion = registrosSueldo.find_element(By.XPATH, './td[5]').text
                sueldo = registrosSueldo.find_element(By.XPATH, './td[6]').text
                datos={
                    "orden": orden,
                    "fechaRegistro": fechaRegistro,
                    "empresa": empresa,
                    "RUC": ruc,
                    "condicion": condicion,
                    "sueldo": sueldo,
                    
                }
                resumenLaboral.append(datos)

        self.driver.refresh()
        self.wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/div[2]/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div/figure')))
        self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/ul/li[2]/a").click()


        print()
        print("----------------------------------------------------------      DETALLE CREDITICIO      ---------------------------------------------")
        condicionDetalle=False
        detalleCreditos = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[2]/div[6]/table/tbody/tr[1]/td[2]")
        except:
            pass
            condicionDetalle=True
        if condicionDetalle:
            detalleCreditos=["No hay datos registrados"]
            print("detalleCreditos---->", detalleCreditos)
        else:
            detalleCrediticios = self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[2]/div[6]/table/tbody/tr")
            for detalleCrediticio in detalleCrediticios:
                orden = detalleCrediticio.find_element(By.XPATH, './td[1]').text
                print("ITERADOR DETALLE DE CREDITOS---->", orden)
                entidadFinanciera = detalleCrediticio.find_element(By.XPATH, './td[2]').text
                tipoProducto = detalleCrediticio.find_element(By.XPATH, './td[3]').text
                monto = detalleCrediticio.find_element(By.XPATH, './td[4]').text
                calificacion = detalleCrediticio.find_element(By.XPATH, './td[5]').text
                datos={
                    "orden": orden,
                    "entidadFinanciera": entidadFinanciera,
                    "tipoProducto": tipoProducto,
                    "monto": monto,
                    "calificacion": calificacion,
                }
                detalleCreditos.append(datos)


        print()
        print("----------------------------------------------------------      REPORTE CREDITICIO      ---------------------------------------------")
        condicionReporte=False
        reporteCreditos = []
        try:
            self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[2]/div[2]/table/tbody/tr/td[2]")
        except:
            pass
            condicionReporte=True
        
        if condicionReporte:
            reporteCreditos=["No hay datos registrados"]
            print("resumenLaboral---->", reporteCreditos)
        else:
            reporteCrediticios = self.driver.find_elements(By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div/div[2]/div/div[2]/div[2]/table/tbody/tr")
            for reporteCrediticio in reporteCrediticios:
                orden = reporteCrediticio.find_element(By.XPATH, './td[1]').text
                print("ITERADOR REPORTE DE CREDITOS---->", orden)
                fechaReporte = reporteCrediticio.find_element(By.XPATH, './td[2]').text
                entFinancieras = reporteCrediticio.find_element(By.XPATH, './td[3]').text
                calNormal = reporteCrediticio.find_element(By.XPATH, './td[4]').text
                calCPP = reporteCrediticio.find_element(By.XPATH, './td[5]').text
                calDeficiente = reporteCrediticio.find_element(By.XPATH, './td[6]').text
                calDudoso = reporteCrediticio.find_element(By.XPATH, './td[7]').text
                calPerdida = reporteCrediticio.find_element(By.XPATH, './td[8]').text

                datos={
                    "orden": orden,
                    "fechaReporte": fechaReporte,
                    "entFinancieras": entFinancieras,
                    "calNormal": calNormal,
                    "calCPP": calCPP,
                    "calDeficiente": calDeficiente,
                    "calDudoso": calDudoso,
                    "calPerdida": calPerdida,
                }
                reporteCreditos.append(datos)
        print("--------------------------------------------------------- FIN LECTURAS  ------------------------------------------------------------")

        print()
        print("<------ datosPersonales ------>")
        print(datosPersonales)
        print()
        print("<------ datosTelefonicos ------>")
        print(datosTelefonicos)
        print()
        print("<------ direccionesRegistradas ------>")
        print(direccionesRegistradas)
        print()
        print("<------ datosFamiliares ------>")
        print(datosFamiliares)
        print()
        print("<------ autosRegistrados ------>")
        print(autosRegistrados)
        print()
        print("<------ resumenLaboral ------>")
        print(resumenLaboral)
        print()
        print("<------ reporteCreditos ------>")
        print(reporteCreditos)
        print()
        print("<------ detalleCreditos ------>")
        print(detalleCreditos)
        print()
        
        


        